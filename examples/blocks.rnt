[
: block_test 
"what is the value?" say
dup 1 = { "value is 1. 1 dinosaur!" say drop end } goto 
dup 2 = { "value is 2. 2 dogs." say drop end } goto 
dup 3 = { "value is 3. 3 apples." say drop end } goto 
end ;

: nested

dup 5 < { 
    "the value is less than 5" say 
    2 > {
        "the value is greater than 2" say end
    } goto
    end 
} goto

"the value is greater than 5" say end ;

: cflanders
"here is a block that repeats 8 times" say
"It's like nothing at all..." say 
0 { 
# n addr
# addr n--
swap inc
swap 
"nothing at all..." say 
}  
# n addr
# n addr n
over 
# n addr ?
8 < 
# n addr ? addr
over
goto 
2 drops
end ;

: flanders _cflanders call ;

: recursion 
inc dup "hello world" say 
dup 8 < 
_recursion goto
end ;

# infinite loop: call with "_looper call"
: looper
1 dup { "are we here?" say } over over goto end
;

# reproduces "rep" functionality
: my_rep
0 dup { swap inc swap -4 peak ex } 
# n addr n addr
over -6 peak < over
goto 
5 drops
end
;

: cditdot 2 rnd { "dit" say end } goto "dot" say end ;

: ditdot _cditdot call ;

]

# conditionals
1 _block_test call
2 _block_test call
3 _block_test call

# block repeat
flanders

4 _nested call

0 _recursion call

"using rep" say
4 _ditdot rep

"using my rep" say
4 _ditdot _my_rep call
